import javafx.application.*;
import javafx.scene.*;
import javafx.stage.*;
import javafx.scene.layout.*;
import javafx.scene.control.*;
import java.util.*;
import javafx.geometry.*;
import javafx.scene.paint.*;
import javafx.scene.image.*;
import javafx.event.*;
import javafx.animation.*;
import javafx.application.*;
import javafx.scene.*;
import javafx.stage.*;
import javafx.scene.layout.*;
import javafx.scene.control.*;
import java.util.*;
import javafx.geometry.*;
import javafx.scene.paint.*;
import javafx.scene.image.*;
import javafx.scene.canvas.*;
import javafx.scene.input.*;
import javafx.scene.shape.*;
// imports

public class ProjectGame extends Application
{
   public void start(Stage stage)
   {  
      // created gridpane
      GridPane root = new GridPane();
      
      // new label and added
      l = new Label("balls left: " + count);
      root.add(l,5,0);
      
      ballB = true;
      
      // loop over to create the game panes and add them to the root
      for (int i=0; i<4; i++)
         {
         for(int j=0; j<4; j++)
            {
            gPane = new GamePane(i, j);
            gPaneList[i][j]= gPane; 
            root.add(gPane, i, j);
            
            }
         }
      
      
      // loop over to check which moves can be made and to set the visibility accordingly
      for (int i=0; i<4; i++)
         {
         for(int j=0; j<4; j++)
            {
            System.out.println("pane " + i + " " + j + ", button: " );
            moveCanBeMade(i, j);
            
            if (i==0 && j==2)
               {
               gPaneList[i][j].setVisibility(false, false, false, false, false);
               } 
  
            }
         }  
         
         
      // print it out
      Scene scene = new Scene(root, 600, 600);
      stage.setScene(scene);
      stage.setTitle("Ball game Project");
      stage.show();
   }
   
   private Label l; // label
   private boolean ballB; // ball boolean
   private boolean topB = false; // top button boolean
   private boolean bottomB = false; // bottom button boolean
   private boolean rightB = false; // right button boolean
   private boolean leftB = false; // left button boolean
   private int count = 15; // count how many balls are left
   private GamePane gPane; // game pane 
   private GamePane gPaneList [][]= new GamePane [4][4]; // 2d array of game panes
   
   // method to see if we've lost, didn't end up working with the time I had left
   public void possibleMoves()
      {   
      boolean lost = true;
      
      for (int i=0; i<4; i++)
               {
               for (int j=0; j<4; j++)
                  {
                  
                  lost = gPaneList[i][j].getVisibility();
                  }
               }

      }
   
   // method to see which buttons should be visible and set to that way
   public void moveCanBeMade(int i, int j)
         {
         // initiate all buttons to false
         leftB = false;
         rightB = false;
         topB = false;
         bottomB = false;
         
         
         //gPaneList[i][j].setVisibility(ballB, topB, bottomB, rightB, leftB);
         // if the ball is there, go through this
                  if (gPaneList[i][j].getBallVisibility())
                     {
                     // checking every time to see if the ball next to it is there and the ball after is not, and if that is the case, setting the button boolean to true
                     if (i<2)
                        {
                        if (gPaneList[i+1][j].getBallVisibility() && !gPaneList[i+2][j].getBallVisibility())
                           {
                           leftB = true;
                           System.out.println("left Button Active");
                           }
                        }
                     if (i>1)
                        {
                        if (gPaneList[i-1][j].getBallVisibility() && !gPaneList[i-2][j].getBallVisibility())
                           {
                           rightB = true;
                           System.out.println("right Button Active");
                           }
                        }
                     if (j<2)
                        {
                        if (gPaneList[i][j+1].getBallVisibility() && !gPaneList[i][j+2].getBallVisibility())
                           {
                           topB = true;
                           System.out.println("top Button Active");
                           }
                        }
                     if (j>1)
                        {
                        if (gPaneList[i][j-1].getBallVisibility() && !gPaneList[i][j-2].getBallVisibility())
                           {
                           bottomB = true;
                           System.out.println("bottom Button Active");
                           }
                        }
                     // set the visibility of all of the buttons and ball
                     gPaneList[i][j].setVisibility(ballB, topB, bottomB, rightB, leftB);
                     }
                     
                
         }
      
      
      // gamepane class extending gridpane 
      public class GamePane extends GridPane{
      
      // creating the 4 buttons
      Button top = new Button();
      Button bottom = new Button();
      Button right = new Button();
      Button left = new Button();
      
      // booleans for all the buttons
      private boolean ballVisible = true;
      private boolean topVisible = true;
      private boolean bottomVisible = true;
      private boolean rightVisible = true;
      private boolean leftVisible = true;
      
      // i and j ints for x and y position currently checking
      private int i;
      private int j;
      
      // create a new circle canvas
      private CircleCanvasProject circle = new CircleCanvasProject();
      
      // checking if the buttons had a move to be made
      public void checkAllButtons()
      {
      for (int i=0; i<4; i++)
               {
               for (int j=0; j<4; j++)
                  {
                  moveCanBeMade(i, j);
                  }
               }
      }
      
      
      // method to see if all of the buttons were invisible, but it didn't end up working
      public boolean getVisibility()
         {
         boolean tracker = false;
         if (!leftVisible && !rightVisible && !bottomVisible && !topVisible)
            {
            return true;
            }
         return tracker;
         }
      
      // method to set the booleans equal and setting the visibility
      public void setVisibility(boolean ballVisible, boolean topVisible, boolean bottomVisible, boolean rightVisible, boolean leftVisible)
         {
         circle.setVisible(ballVisible);         
         top.setVisible(topVisible);
         bottom.setVisible(bottomVisible);
         right.setVisible(rightVisible);
         left.setVisible(leftVisible);
         this.ballVisible = ballVisible;
         this.topVisible = topVisible;
         this.bottomVisible = bottomVisible;
         this.rightVisible = rightVisible;
         this.leftVisible = leftVisible;
         }
      
      // constructor    
      public GamePane(int i, int j){
         // i and j ints 
         this.i = i;
         this.j = j;
         
         // set the size of the buttons
         top.setMinWidth(80);
         top.setMinHeight(20);
         bottom.setMinWidth(80);
         bottom.setMinHeight(20);
         right.setMinWidth(20);
         right.setMinHeight(80);
         left.setMinWidth(20);
         left.setMinHeight(80);
         
         // draw the circle and all the buttons in their spots
         circle.draw();
         add(circle, 1, 1);
         top.setOnAction(new ButtonListener());
         add(top, 1, 0);
         bottom.setOnAction(new ButtonListener());
         add(bottom, 1, 2);
         right.setOnAction(new ButtonListener());
         add(right,2 ,1);
         left.setOnAction(new ButtonListener());
         add(left,0, 1 );
         
         }
      
      // buttonlistener class
      public class ButtonListener implements EventHandler<ActionEvent>  
      {
         public void handle(ActionEvent e) 
         {  
            // if they press the top button, jump ball down
            if(e.getSource() == top)
               {
               System.out.println("ball " + i +" " + j + " jumped down");
               gPaneList[i][j].setVisibility(false, false, false, false, false);
               gPaneList[i][j+1].setVisibility(false, false, false, false, false);
               gPaneList[i][j+2].setVisibility(true, false, false, false, false);
               }
            
            // if they press the bottom button, jump ball up
            if(e.getSource() == bottom)
               {
               System.out.println("ball " + i +" " + j + " jumped up");
               gPaneList[i][j].setVisibility(false, false, false, false, false);
               gPaneList[i][j-1].setVisibility(false, false, false, false, false);
               gPaneList[i][j-2].setVisibility(true, false, false, false, false);
               }
            
            // if they press the right button, jump ball left
            if(e.getSource() == right)
               {
               System.out.println("ball " + i +" " + j + " jumped left");
               gPaneList[i][j].setVisibility(false, false, false, false, false);
               gPaneList[i-1][j].setVisibility(false, false, false, false, false);
               gPaneList[i-2][j].setVisibility(true, false, false, false, false);
               }
            
            // if they press the left button, jump ball right
            if(e.getSource() == left)
               {
               System.out.println("ball " + i +" " + j + " jumped right");
               gPaneList[i][j].setVisibility(false, false, false, false, false);
               gPaneList[i+1][j].setVisibility(false, false, false, false, false);
               gPaneList[i+2][j].setVisibility(true, false, false, false, false);
               }
           
           checkAllButtons();
           
           // increment cound down becuase a ball has been jumped
           count--;
            
            // change the textfield to what the count unless there are none left, in which case, you won
            // didn't get the chance to check this one, so it might need to be count == 1;
            
            l.setText("balls left: " + count);
            if (count == 0)
               {
               l.setText("you win!");
               }

         }
      } 
      
      // method to get the visibility of the ball
      public boolean getBallVisibility()
         {
         return ballVisible;
         }
        
      }

   // canvas class to create a ball
   class CircleCanvasProject extends Canvas
      {  
      public CircleCanvasProject()
         {
         setWidth(80);
         setHeight(80);
         }
      
      public void draw()
         {
         GraphicsContext gc = getGraphicsContext2D();
         gc.fillOval(0, 0, 80, 80);
         }
      }

        
   // launch arguments
   public static void main(String[] args)
   {
      launch(args);
   }
}

